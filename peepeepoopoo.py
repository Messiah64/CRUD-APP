var4 = 3 + 4j.          #complex #functions for generating random numbers a-=3 def __init__(self): print pow(2,4) #Basic Operators print 'what a beautirint hex(32) total = arg1; print partition+"[10]" print partition+"[2]" #List print arr print dict #myList.sort() CUSTOM SORT? print myFile.name,myFile.closed,myFile.mode print e print myShortList*3 #Loop control statements while var>0: #break arr = [1,2,3,4,5, print 'Hello World'.center(10,'-') #word centered on certain characters #.             read-only and cannot be updated a%=7 import math print myList[0:2] print int('1000',2) print b not in List print myFile.name,myFile.closed,myFile.mode #destructor print cmp(myList,myList) b = 15 child = Child().                # instance of child #Arithmetic Operators print "Hello, Python" for index in xrange(len(languages)-2): print partition+"[14]" print encode.endswith('\n',0,len(encode)) # w,wb,w+,wb+ print myList[0:2] print partition+"[4]" #Data Conversion print myDict['Complex'] print self.name,self.rollNo print myList.remove(myList[len(myList)-1]). #removes with object but doesn't return print myDict.get('PQR','Not Available here!') #arg2 is default value if key is not found #functions 6,7,8,9,10] #Arithmetic Operators return a+b l,m,n = 1,1.001,'hello' #Read from keyboard print myList print 'Hello World'.center(10,'-') #word centered on certain characters print round(c),round(d) a+=5 List = [1,2,3,4,5,6,7,8,9] myShortList = ["abcd"] print myTuple[0:2] myFile = open("myFile.txt","r") #use """--text--""" for multi-line paragraphs dict = {} print s,t,u print partition+"[8]" languages = ['C','C++','JAVA','PYTHON'] print myDict['List'] dict.clear() #removes all entries print "Bases :",Student.__bases__; print cmp(myList,myList) print cmp(myShortList,myList); # seek : helps us to go a specified position in the file to do I/O if var==5: printInfo(age=20,name="xyz") #order doesn't matter print myList[0:2] print myDict.values() def __del__(self): printInfo(age=20,name="xyz") #order doesn't matter print myDict['Complex'] print 'Child Method Called' print partition+"[22]" print '13432421432'.isdigit() #checks if string conatins only digits print complex(3,4) # seek : helps us to go a specified position in the file to do I/O print math.ceil(c),math.ceil(d) def displayStudent(self): __count = 0 #private data member myShortDict = {'String':'Bye','Integer':99}; print int('8') #Can take any number of args but returns one value in form of expression a*=9 age. = 17 while var>0: #use ; for multiple statements on same line #functions #use ; for multiple statements on same line if var==5: print 'What a beautiful morning it is !'.split(" ",3) #splits string using delimiter with no of strings specified print long(123) a/=3 #Set #Bitwise Operators __count = 0 #private data member List = [1,2,3,4,5,6,7,8,9] print partition+"[24]" print partition+"[1]" print a^b #use rfind() to search backwards print a|b String1 = "Hello World!" #multi-line statements : continuation character '\' def _add(a,b): print myList var-=1 print random.choice((1,2,3,4,5,6,7,8,9)); print 'What a beautiful morning it is !'.split(" ") #splits string using delimiter print myList studentCount = 0 d #Comparision Operators print a<<1,a>>1 #Can take any number of args but returns one value in form of expression #break print 'What a beautiful morning it is !'.split(" ",3) #splits string using delimiter with no of strings specified print query.find('abcd') print cmp(myShortList,myList); child.childMethod().            # child calls its method count = 0 print "a=3" __count = 0 #private data member myFile.close() print self.name,self.rollNo print languages[index] myFile.close() print b not in List p = 1.      #integer a=3 break print "Parent Attribute :", Parent.parentName #Dictionary : It is similar to hash map i.e., has key-value pair #PLEASE UNDERSTAND ENVIRONMENT VARIABLES AND COMMAND LINE ARGUMENTS ? child.childMethod().            # child calls its method print myDict # seek : helps us to go a specified position in the file to do I/O #break print printSum(10,20,30,40,50,60,70); class Student: print name,age c + \ dict = {} print 3>3,2<3 print partition+"[14]" print 11//3,-11//3#Floor Division print "Hello\vWorld" #Vertical Tab myFile = open("myFile.txt","r") print math.ceil(c),math.ceil(d) print "a=2" mult. = lambda arg1,arg2 : arg1*arg2 print s,t,u #functions for generating random numbers q = 1.001.  #floating point def __init__(self,name,rollNo): #Read from keyboard print a|b print str[3:].          #print characters starting from 4th myFile.close() myFile = open("myFile.txt","r") print "Bases :",Student.__bases__; print dict[2] print partition+"[2]" print myShortList*3 d triple quotes""" dict = dict.fromkeys(names,height) #note : here keys will not take corresponding values arr = [1,2,3,4,5, print myTuple[0:2] print String1[6:],String1[:6] print myDict.get('PQR','Not Available here!') #arg2 is default value if key is not found print hasattr(stu1,'name') s=t=u=1 print random.choice([1,2,3,4,5,6,7,8,9]); #create. new dictionary with keys-values from sequence print "a=2" print "a=3" print query.find('Whatsapp',0,len(query)).  #finds substring and returns index print l,m,n print int(8.14) print var #print query.index('abcd') #same as find but raises exception print myShortList*3 print myList print myList.pop(len(myList)-1).            #removes with index and returns it #While 'Class to store details of students in a school' print list((1,2,3,4,5)) var2 = 100000000000L.   #long #uniform function generates a random float between arg1 and arg2 a=3 print String1[6:],String1[:6] def printSum(arg1,*VARIABLES) : print "Hello, " + str.  #appends Hello, to str and then prints it #uniform function generates a random float between arg1 and arg2 b = 15 stu1 = Student("XYZ",007) print myFile.name,myFile.closed,myFile.mode print myList.count('Hello') para = raw_input("Tell me some about yourself...(In 10 words)\n") b = 15 print myList print 'Hello World'.endswith('ld',0,len('Hello World')) print partition+"[17]" print myList random.shuffle(List) myList = ['Hello',23,17.28,5+4j,'Hello',12,'Hello'] myShortList = ["abcd"] # arg1 : start.  arg2 : stop. step : steps to be added in a num to decide random number print myList print partition+"[20]" return a+b myList.extend(myShortList) var-=1 print '#dacacj%$^^'.isalnum() #checks alpha numeric myList = ['Hello',23,17.28,5+4j,'Hello',12,'Hello'] print partition+"[24]" a-=3 print 'hello'.capitalize() while count<3 : var1 = 10.              #integer a=1 #myList.sort() CUSTOM SORT? print "Hello\tWorld" #Horizontal Tab # seek : helps us to go a specified position in the file to do I/O total+=var class Student: print myDict.setdefault('PQR','Default') a=10;b=-10;c=1.75;d=-1.75 print 'Missisippi'.count('is',0,len('Missisippi')) # number of times substring occurs print myList[0].  #count from left print myDict['Complex'] #continue myFile = open("myFile.txt","r") print "a=3" print myList print partition+"[22]" print "a=2" #Arithmetic Operators #For Loops # @author Rutvik Shah b = 15 #This script contains basic python commands print partition+"[2]" print e d myTuple = myShortTuple + myTuple #valid print var myShortList = ["abcd"] print a #constructor print 3>=3,4<=4 print var a=2 myFile.close() print myTuple[0] #similar function starts with print int('1000',2) #keyword arguments & default arguments #Note: Each method in class should have first argument as self print 'Missisippi'.count('is',0,len('Missisippi')) # number of times substring occurs print myFile.tell() print '#dacacj%$^^'.isalnum() #chec]3L a=1;b=2;c=3;d=4 print ,vvar4 prin
t 
oct(32) dict['one'] = "This is One" #similar function starts with print 'HelloWorld'.swapcase() print '#dacacj%$^^'.isalnum() #checks alpha numeric print "Bases :",Student.__bases__; print myDict['Complex'] #keyword arguments & default arguments var = 10 #use ; for multiple statements on same line p = 1.      #integer print myDict.setdefault('PQR','Default') #myTuple[0] = '1000' Invalid print myDict.get('PQR','Not Available here!') #arg2 is default value if key is not found stu1 = Student("XYZ",007) while var>0: #Numbers # print partition print "Destructor is called" a+=3 print myList.pop(len(myList)-1).            #removes with index and returns it print languages[index] print String1[6:],String1[:6] #destructor myList.append('ABCD') print random.uniform(10,20) break print s,t,u print cmp(a,c),cmp(c,a),cmp(a,abs(a)) studentCount = 0 # a,ab,a+,ab+ print cmp(myTuple,myShortTuple) def __del__(self): print s,t,u var = 10 stu1.displayStudent() print 3>=3,4<=4 #printable string representation of class print max('Hello World') #returns max alphabet according to ASCII print int('8') print name,age print var print encode.endswith('\n',0,len(encode)) print 'Hello World'.center(10,'-') #word centered on certain characters print e print a myList = ['Hello',23,17.28,5+4j,'Hello',12,'Hello'] print a #use ; for multiple statements on same line print mult(10,10); print language print partition+"[20]" if var==5: class Student: print int(8.14) #similar function starts with print "a=2" print math.floor(c),math.floor(d) # print partition print hex(32) #For Loops print "Private Attribute:",hasattr(stu1,'__count') #cannot be accessed print self.studentCount,self.__count return 'Student(%s, %d)' % (self.name,self.rollNo) print partition+"[7]" #random function returns a float random number between 0 and 1 del dict.    #deletes entire Dictionary #use rindex() to search backwards random.shuffle(List) #use """--text--""" for multi-line paragraphs #Note: Keys in a Dictionary should be immuatable so Tuples can qualify as keys but not Lists #destructor if var==5: sentence = "this is a sentence" print 11//3,-11//3#Floor Division a//=3 print random.random(); 6,7,8,9,10] print str[1].           #prints second character as indexing starts with 0 #delete print ~a,~b print partition+"[19]" myDict = {'String':'Hello','Integer':123,'Floating':3.14,'Complex':3+4j,'List':myList}; print a|b print 3>=3,4<=4 import os a=1 print cmp(myDict,myShortDict) print "a=?" print partition+"[6]" #Dictionary : It is similar to hash map i.e., has key-value pair a=-11 parentName = "Parent" print idiom self.rollNo = rollNo dict.clear() #removes all entries print "a=3" #myTuple[0] = '1000' Invalid languages = ['C','C++','JAVA','PYTHON'] print "a=2" else : print "Parent Attribute :", Parent.parentName print partition+"[26]" print count #They are not created by normal def keyword but using lambda keyword def __init__(self): print math.floor(c),math.floor(d) print random.choice([1,2,3,4,5,6,7,8,9]); myDict = {'String':'Hello','Integer':123,'Floating':3.14,'Complex':3+4j,'List':myList}; #Tuple.  Note: only difference between tuple and list is that tuples are setattr(stu1,'name',"PQR") print myFile.name,myFile.closed,myFile.mode print partition+"[1]" print partition+"[20]" print hex(32) print "Hello\tWorld" #Horizontal Tab a=3 arr = [1,2,3,4,5, height=(123,140,190) print math.ceil(c),math.ceil(d) os.remove("myNewFile.txt") print "Dict. :",Student.__dict__; print partition+"[7]" myList = ['Hello',23,17.28,5+4j,'Hello',12,'Hello'] print myList[-2]. #count from right print r'\n',R'\n'. #Raw String: Supresses escape sequences #Set print myList[0].  #count from left total = arg1; #Read from keyboard print myList #Mathematical Functions break a=3 print math.floor(c),math.floor(d) random.shuffle(List) #File Reading and Writing Modes b=6 def __init__(self): print myTuple*3 a=1;b=2;c=3;d=4 print p,q,r #Basic Operators #myTuple[0] = '1000' Invalid print 3==3 #use rindex() to search backwards print oct(32) print partition+"[21]" var4 = 3 + 4j.          #complex print encode.decode('base64','strict') print printSum(10,20,30,40,50,60,70); print mult(10,10); print cmp(myDict,myShortDict) a=-11 print 'H' in 'Hello' #They are not created by normal def keyword but using lambda keyword #While #use '--text--' or "--text--" for single line word or sentence print query.find('Whatsapp',0,len(query)).  #finds substring and returns index var-=1 print random.choice('Hello_World!'); #This script contains basic python commands #continue while var>0: print myDict.get('PQR','Not Available here!') #arg2 is default value if key is not found print 3!=4,3<>4 print myShortList*3 def __init__(self,name,rollNo): print myDict encode = 'HelloWorld'.encode('base64','strict') #encoding print random.choice((1,2,3,4,5,6,7,8,9)); print _add(10,20); print encode.decode('base64','strict') print partition+"[9]" print myShortList*3 print r'\n',R'\n'. #Raw String: Supresses escape sequences print tuple('Hello') print myDict print partition+"[25]" #While print 'Hello World'.endswith('ld',0,len('Hello World')) #Membership Operators print myList.pop(len(myList)-1).            #removes with index and returns it print random.randrange(100,500,5); print word print partition+"[19]" print ~a,~b print long(123) print "Hello, " + str.  #appends Hello, to str and then prints it print '#dacacj%$^^'.isalnum() #checks alpha numeric #functions for generating random numbers print max('Hello world') #similar function isupper() and upper() setattr(stu1,'name',"PQR") #similar function isupper() and upper() print abs(b),abs(d) for index in xrange(len(languages)-2): height=(123,140,190) print cmp(myList,myList) del dict.    #deletes entire Dictionary print cmp(myShortList,myList); print random.randrange(100,500,5); print partition+"[12]" print 'What a beautiful morning it is !'           .rstrip() #removes trailing whitespaces # seek : helps us to go a specified position in the file to do I/O print cmp(myList,myList) a=1 print myTuple + myShortTuple myList.append('ABCD') print myList print str[3:9].         #prints characters from 4th to 10th print partition+"[2]" print myList[0].  #count from left p = 1.      #integer 6,7,8,9,10] print a|b print 'hello'.capitalize() # arg1 : start.  arg2 : stop. step : steps to be added in a num to decide random number print _add(10,20); del stu1 sentence = "this is a sentence" print myTuple #Mathematical Functions var-=1 myFile.close() print partition+"[2]" else : print partition+"[14]" List = [1,2,3,4,5,6,7,8,9] print myDict #use '--text--' or "--text--" for single line word or sentence myTuple = ('Hello',23,17.28,5+4j) #functions for generating random numbers print "Hello, Python" # a,ab,a+,ab+ print _add(10,20); print cmp(myDict,myShortDict) print paragraph #similar function isupper() and upper() print dict[2] print language del dict.    #deletes entire Dictionary print myDict r = 'hello' #string #myTuple[0] = '1000' Invalid #Read from keyboard #myFile.seek(3,1) means read three bytes from current position myDict = {'String':'Hello','Integer':123,'Floating':3.14,'Complex':3+4j,'List':myList}; print '#dacacj%$^^'.isalnum() #checks alpha numeric print myList + myShortList print myList.count('Hello') str = "This is a sample python string. " #variable length arguments r = 'hello' #string print myDict print query.find('abcd') #Loop control statements #myFile.seek(3,0) means read three bytes from beginning of file a=1;b=2;c=3;d=4 #Tuple.  Note: only difference between tuple and list is that tuples are print 3!=4,3<>4 # seek : helps us to go a specified position in the file to do I/O dict = {} myList.extend(myShortList) def add(a,b): myList.append('ABCD') print a in List print "Bases :",Student.__bases__; del dict.    #deletes entire Dictionary age. = 17 #This script contains basic python commands return a+b print 'What a beautiful morning it is !'           .rstrip() #removes trailing whitespaces print '#dacacj%$^^'.isalnum() #checks alpha numeric print 'check thsi out, coz thsi is gr8'.replace('thsi','this') #myTuple[0] = '1000' Invalid print a&b count = 0 #constructor #choice function to select numbers randomly from a given list,tuple or string print long('123456') String1 = "Hello World!" print random.choice((1,2,3,4,5,6,7,8,9)); a=1 print random.randrange(100,500,5); print "Destructor is called" return a+b print 'H' in 'Hello' import os def __init__(self,name,rollNo): Parent.parentName = name #Tuple.  Note: only difference between tuple and list is that tuples are print dict['one'] print myFile.read() print partition+"[10]" #Object Oriented Programming print myDict.get('PQR','Not Available here!') #arg2 is default value if key is not found a+=3 #Rename and Delete File 'Class to store details of students in a school' #Object Oriented Programming #For Loops print encode.decode('base64','strict') #use ; for multiple statements on same line print partition+"[7]" dict = dict.fromkeys(names,height) #note : here keys will not take corresponding values var3 = 1.0001.          #float printInfo(name="xyzw") print 3!=4,3<>4 print "Hello\tWorld" #Horizontal Tab #similar to get but if key is not present then it will set arg1-arg2 key-value pair else : for language in languages: myList.append('ABCD') partition = "----------------------------------------------------------------" while count<3 : random.seed(17); print myTuple[0] a=10;b=-10;c=1.75;d=-1.75 List = [1,2,3,4,5] if var==5: #.     We don't need to add self while calling function using object #delete #delattr(stu1,'name') to delete attribute print math.floor(c),math.floor(d) age. = 17 print cmp(myDict,myShortDict) #Set #use rindex() to search backwards print "Module:",Student.__module__; #random function returns a float random number between 0 and 1 print encode.endswith('\n',0,len(encode)) var3 = 1.0001.          #float while var>0: dict.clear() #removes all entries print ~a,~b print s,t,u print "Name. :",Student.__name__; #Format Symbols : %c:character %i:signed decimal %u:unsigned decimal #Numbers for letter in 'Hello World': #shuffle to shuffle a list or a tuple def __init__(self): print int('8') a//=3 6,7,8,9,10] Parent.parentName = name print 11//3,-11//3#Floor Division return 'Student(%s, %d)' % (self.name,self.rollNo) #Python basic data types : Numbers, String, List, Tuple, Dictionary print "Doc.  :",Student.__doc__; #similar function starts with print partition+"[2]" print long(123) dict = dict.fromkeys(names,height) #note : here keys will not take corresponding values #Note: Keys in a Dictionary should be immuatable so Tuples can qualify as keys but not Lists print str[3:9].         #prints characters from 4th to 10th print myDict.values() print a&b str = "This is a sample python string. " 'Class to store details of students in a school' #Object Oriented Programming q = 1.001.  #floating point a = 16 myTuple = myShortTuple + myTuple #valid #to wait for user return a+b myTuple = myShortTuple + myTuple #valid a=3 #This script contains basic python commands print 'What a beautiful morning it is !'.split(" ") #splits string using delimiter query = "Hi Siri, Open Whatsapp on my phone" #Mathematical Functions myList.reverse() print myList #Data Conversion print str*3.            #prints given string 3 times print hasattr(stu1,'name') print myShortList*3 print random.choice('Hello_World!'); a = 16 print cmp(myTuple,myShortTuple) #myList.sort() CUSTOM SORT? print myList[0].  #count from left print random.uniform(10,20) print partition+"[15]" print str*3.            #prints given string 3 times print partition+"[1]" print random.choice([1,2,3,4,5,6,7,8,9]); stu1.displayStudent() print query.find('Whatsapp',0,len(query)).  #finds substring and returns index del dict[2]. #removes one entry print myList.remove(myList[len(myList)-1]). #removes with object but doesn't return print str[3:].          #print characters starting from 4th str = "This is a sample python string. " print myList.count('Hello') encode = 'HelloWorld'.encode('base64','strict') #encoding print r'\n',R'\n'. #Raw String: Supresses escape sequences #similar to get but if key is not present then it will set arg1-arg2 key-value pair #While myTuple = ('Hello',23,17.28,5+4j) def displayStudentCount(self): #Bitwise Operators print myTuple[0:2] print a<<1,a>>1 for var in VARIABLES: print 3>=3,4<=4 dict[2].    = "This is Two" stu1.displayStudentCount() class Child(Parent): # define child class idiom = raw_input("Enter an idiom") print myTuple*3 myTuple = ('Hello',23,17.28,5+4j) if var==5: print 'Hello World'.endswith('ld',0,len('Hello World')) print oct(32) print 'Hello World'.center(10,'-') #word centered on certain characters print 'Hello World'.endswith('ld',0,len('Hello World')) print int('8') # w,wb,w+,wb+ print "I am %s and I am %d years old" %(name,age) print a print '13432421432'.isdigit() #checks if string conatins only digits del dict.    #deletes entire Dictionary print myList setattr(stu1,'name',"PQR") a-=3 a=2 print str*3.            #prints given string 3 times print a #to wait for user # seek : helps us to go a specified position in the file to do I/O age. = 17 myList.append('ABCD') break print p,q,r #Tell and Seek myFile = open("myFile.txt","r") word = 'word' #functions for generating random numbers #For Loops print myList + myShortList del stu1 print random.choice('Hello_World!'); print random.uniform(10,20) for var in VARIABLES: partition = "----------------------------------------------------------------" print myList[0].  #count from left #use ; for multiple statements on same line print hasattr(stu1,'name') print myTuple #Mathematical Functions #String print self.name,self.rollNo print str[3:9].         #prints characters from 4th to 10th myList = ['Hello',23,17.28,5+4j,'Hello',12,'Hello'] print partition+"[13]" a/=3 print random.randrange(100,500,5); print long(123) del myList[0].    #we can Update Lists a//=3 #Anonymous Functions self.rollNo = rollNo height=(123,140,190) var3 = 1.0001.          #float print a<<1,a>>1 while var>0: print myTuple myFile.seek(len(para)-3,2) #means read 3 bytes from end of file print query.find('abcd') #File I/O print partition+"[21]" child.childMethod().            # child calls its method print b not in List print partition+"[13]" myFile.write(para) print r'\n',R'\n'. #Raw String: Supresses escape sequences print languages[index] print random.choice('Hello_World!'); #This script contains basic python commands paragraph = """this paragraph extends 'Class to store details of students in a school' print paragraph #similar function isupper() and upper() #Basic Operators print stu1 def __init__(self,name,rollNo): #Rename and Delete File #similar to get but if key is not present then it will set arg1-arg2 key-value pair myFile = open("myFile.txt","r") print "Name. :",Student.__name__; myList.append('ABCD') a/=3 myList.append('ABCD') print myDict['List'] String1 = "Hello World!" return myFile.seek(len(para)-3,2) #means read 3 bytes from end of file #use ; for multiple statements on same line #File Reading and Writing Modes print partition+"[7]" #.             read-only and cannot be updated print myDict['Complex'] print 'Hello\tWorld'.expandtabs(20) #increase spaces in Tab print random.choice([1,2,3,4,5,6,7,8,9]); #myFile.seek(3,1) means read three bytes from current position print max('Hello World') #returns max alphabet according to ASCII print partition+"[1]" print 'Hello World'.center(10,'-') #word centered on certain characters q = 1.001.  #floating point #Anonymous Functions #shuffle to shuffle a list or a tuple print a^b sentence = "this is a sentence" print partition+"[4]" print query.find('abcd') dict = {} print r'\n',R'\n'. #Raw String: Supresses escape sequences class Student: print add(10,20); #myTuple[0] = '1000' Invalid return print math.sqrt(2) query = "Hi Siri, Open Whatsapp on my phone" a = 16 print 'hello'.capitalize() print myList[-2]. #count from right r = 'hello' #string partition = "----------------------------------------------------------------" List = [1,2,3,4,5] #It is like a null statement : where a statement is required synatctically dict = {} myFile.close() print float('1.23') myFile.close() #functions if a==3 : print random.choice((1,2,3,4,5,6,7,8,9)); languages = ['C','C++','JAVA','PYTHON'] print random.choice('Hello_World!'); for var in VARIABLES: print word print languages[index] print myList mySet = {1,2,'abcd'} myList[0] = 'xyz' #we can Update Lists #print query.index('abcd') #same as find but raises exception for index in range(len(languages)): for index in range(len(languages)): print cmp(myShortList,myList); #Can take any number of args but returns one value in form of expression print '13432421432'.isdigit() #checks if string conatins only digits partition = "----------------------------------------------------------------" def _add(a,b): #.             read-only and cannot be updated #have there own local namespace so cannot access any other parameters other than its parameter list stu1.displayStudent() #constructor #myTuple[0] = '1000' Invalid #Bitwise Operators print myFile.read() #Anonymous Functions names=('George','Gary','Gilbert') myList.extend(myShortList) print float('1.23') print math.log(e),math.log10(10) dict['one'] = "This is One" print 3==3 arr = [1,2,3,4,5, print a if var==5: for letter in 'Hello World': print a print 'What a beautiful morning it is !'.split(" ",3) #splits string using delimiter with no of strings specified print cmp(myList,myList) myList.extend(myShortList) myFile.close() #Format Symbols : %c:character %i:signed decimal %u:unsigned decimal print 3==3 print 'hello'.islower() print b not in List print 'What a beautiful morning it is !'           .rstrip() #removes trailing whitespaces print partition+"[13]" print query.find('abcd') if a==3 : print float(1) print encode.endswith('\n',0,len(encode)) str = myFile.read() print float('1.23') print "Hello\vWorld" #Vertical Tab #.                %x:hexadeximal %o:octal %e:exponent %f:float print "Destructor is called" print str*3.            #prints given string 3 times print "Module:",Student.__module__; print float(1) myFile.write(para) __count = 0 #private data member print a^b print 'Hello World'.center(10,'-') #word centered on certain characters print List print math.exp(2) print 'H' not in 'Hello' # tell : tells you current position within the file where we start #Object Oriented Programming myFile.write(para) print cmp(myList,myList) #For Loops print math.log(e),math.log10(10) print partition+"[26]" #use rindex() to search backwards #Tell and Seek total = arg1; #use """--text--""" for multi-line paragraphs total = arg1; sentence = "this is a sentence" languages = ['C','C++','JAVA','PYTHON'] print myTuple[0] print list((1,2,3,4,5)) partition = "----------------------------------------------------------------" #multi-line statements : continuation character '\' print e print 'HelloWorld'.swapcase() del myList[0].    #we can Update Lists print a print partition+"[6]" print "Destructor is called" print 'hello'.capitalize() paragraph = """this paragraph extends #Anonymous Functions print encode a=-11 #Defining a custom function print myList + myShortList var = 10 elif a==2 : # raw_input('Press Enter to Exit') print var1,var2,var3,var4 print random.choice((1,2,3,4,5,6,7,8,9)); print 'What a beautiful morning it is !'.split(" ",3) #splits string using delimiter with no of strings specified #Basic Operators print languages[index] print myDict.setdefault('PQR','Default') def getAttr(self): p = 1.      #integer #While #have there own local namespace so cannot access any other parameters other than its parameter list print myShortList*3 print round(c),round(d) print var def printInfo(name,age=35) : var-=1 age. = 17 print math.modf(c),math.modf(d) print int('1000',2) def printSum(arg1,*VARIABLES) : # seek : helps us to go a specified position in the file to do I/O # tell : tells you current position within the file where we start print math.floor(c),math.floor(d) print a #While print myTuple[0:2] a*=9 while var>0: # arg1 : start.  arg2 : stop. step : steps to be added in a num to decide random number print 'Hello World'.endswith('ld',0,len('Hello World')) myFile = open("myFile.txt","r") c + \ print issubclass(Child,Parent),isinstance(child,Child) #checks if it is subclass and instance of particular class #Set print math.log(e),math.log10(10) print myDict print complex(3,4) print "Dict. :",Student.__dict__; str = "This is a sample python string. " print random.choice('Hello_World!'); print pow(2,4) #have there own local namespace so cannot access any other parameters other than its parameter list #have there own local namespace so cannot access any other parameters other than its parameter list print languages[index] #use rindex() to search backwards print partition+"[26]" var = 10 del myList[0].    #we can Update Lists s=t=u=1 print a Student.studentCount+=1 print "Hello\vWorld" #Vertical Tab print random.randrange(100,500,5); print myDict print int('8') print partition+"[6]" print "I am %s and I am %d years old" %(name,age) print word print "Module:",Student.__module__; os.rename("myFile.txt","myNewFile.txt") var1 = 10.              #integer del dict[2]. #removes one entry print myList print 3!=4,3<>4 var4 = 3 + 4j.          #complex print 'Hello\tWorld'.expandtabs(20) #increase spaces in Tab print list((1,2,3,4,5)) a+=5 print cmp(a,c),cmp(c,a),cmp(a,abs(a)) print 1+2,2*4,4-1,24/3,8%5 print arr print word print a|b #For Loops print random.random(); os.remove("myNewFile.txt") printInfo(name="xyzw") #use """--text--""" for multi-line paragraphs print myDict.get('PQR','Not Available here!') #arg2 is default value if key is not found print "Doc.  :",Student.__doc__; p = 1.      #integer def __init__(self,name,rollNo): __count = 0 #private data member myFile.close() #List print cmp(myShortList,myList); print a def _add(a,b): import os print random.choice([1,2,3,4,5,6,7,8,9]); #myList.sort() CUSTOM SORT? #Note: Keys in a Dictionary should be immuatable so Tuples can qualify as keys but not Lists #printable string representation of class print partition+"[14]" #Decision Making # print partition myShortList = ["abcd"] print languages[index] str = "This is a sample python string. " print 'HelloWorld'.swapcase() print "a=2" myFile = open("myFile.txt","w") #print "Hello\rWorld"#Carriage Return #use '--text--' or "--text--" for single line word or sentence print myTuple + myShortTuple return print math.log(e),math.log10(10) self.rollNo = rollNo myFile = open("myFile.txt","w") print 3>=3,4<=4 class Child(Parent): # define child class parentName = "Parent" #Dictionary : It is similar to hash map i.e., has key-value pair print var #Mathematical Functions print myList[1:] sentence = "this is a sentence" #myTuple[0] = '1000' Invalid print dict # tell : tells you current position within the file where we start print "Destructor is called" #multi-line statements with [] or {} need not need continuation character var = 10 #Membership Operators myList.append('ABCD') print l,m,n import random print partition+"[4]" print s,t,u print 1+2,2*4,4-1,24/3,8%5 print "Parent Attribute :", Parent.parentName print myList + myShortList print a def __init__(self,name,rollNo): print str[3:9].         #prints characters from 4th to 10th print a print 3>3,2<3 #Loops #similar function starts with #Set print a<<1,a>>1 myFile.close() #similar function starts with #constructor query = "Hi Siri, Open Whatsapp on my phone" print math.sqrt(2) myFile.close() #Can take any number of args but returns one value in form of expression #have there own local namespace so cannot access any other parameters other than its parameter list def _add(a,b): print 'HelloWorld'.lower() class Child(Parent): # define child class print a|b print partition+"[13]" #printable string representation of class # a,ab,a+,ab+ #Numbers #.             read-only and cannot be updated print issubclass(Child,Parent),isinstance(child,Child) #checks if it is subclass and instance of particular class print myDict['Complex'] dict = {} print partition+"[21]" #uniform function generates a random float between arg1 and arg2 print myShortList*3 count += 1 dict = {} print 'Hello World'.endswith('ld',0,len('Hello World')) # @author Rutvik Shah print paragraph #Comparision Operators var1 = 10.              #integer arr = [1,2,3,4,5, print mySet print 'What a beautiful morning it is !'           .rstrip() #removes trailing whitespaces del dict[2]. #removes one entry print 'H' in 'Hello' a%=7 #It is like a null statement : where a statement is required synatctically d print myFile.tell() #Comparision Operators print mySet #constructor print "Name. :",Student.__name__; print 'Hello\tWorld'.expandtabs(20) #increase spaces in Tab a+=5 print math.exp(2) print encode print a print partition+"[4]" print a #variable length arguments mySet = {1,2,'abcd'} print partition+"[1]" print 3==3 print math.sqrt(2) print languages[index] print myDict.keys() def printInfo(name,age=35) : print self.name,self.rollNo print partition+"[20]" child = Child().                # instance of child os.remove("myNewFile.txt") print int(8.14) print a print str.              #print string print partition+"[1]" def printInfo(name,age=35) : #Read from keyboard print '           What a beautiful morning it is !'.lstrip() #removes leading whitespaces print partition+"[21]" print "Module:",Student.__module__; print 3>=3,4<=4 # seek : helps us to go a specified position in the file to do I/O mult. = lambda arg1,arg2 : arg1*arg2 # tell : tells you current position within the file where we start os.remove("myNewFile.txt") print 11//3,-11//3#Floor Division var1 = 10.              #integer print "a=3" return total #They are not created by normal def keyword but using lambda keyword a+=5 s=t=u=1 import os print partition+"[10]" os.remove("myNewFile.txt") print partition+"[2]" print "Destructor is called" return a+b print 'hello'.capitalize() myFile.write(para) #variables, assignment and multiple assignment print myDict.values() print self.name,self.rollNo #Can take any number of args but returns one value in form of expression print myDict.setdefault('PQR','Default') print myList[1:] myShortDict = {'String':'Bye','Integer':99}; #functions print str.              #print string print cmp(myDict,myShortDict) print partition+"[17]" self.rollNo = rollNo print myDict query = "Hi Siri, Open Whatsapp on my phone" print ~a,~b print String1[6:],String1[:6] q = 1.001.  #floating point myFile.close() s=t=u=1 #choice function to select numbers randomly from a given list,tuple or string setattr(stu1,'name',"PQR") def getAttr(self): b = 15 #destructor print math.ceil(c),math.ceil(d) print myList print max(a,b),min(a,b) self.rollNo = rollNo print 'What a beautiful morning it is !'           .rstrip() #removes trailing whitespaces # Note : All paramaters in Python are passed by reference unlike C,C++ print var count = 0 print list((1,2,3,4,5)) for language in languages: str = "This is a sample python string. " print issubclass(Child,Parent),isinstance(child,Child) #checks if it is subclass and instance of particular class #File Reading and Writing Modes print myList[1:] print dict triple quotes""" print "Destructor is called" print 'hello'.islower() b=6 print '           What a beautiful morning it is !'.lstrip() #removes leading whitespaces print myList print myDict['List'] myFile = open("myFile.txt","r") print myDict print myTuple + myShortTuple #similar function starts with print a^b print 11//3,-11//3#Floor Division a-=3 print dict class Child(Parent): # define child class print cmp(a,c),cmp(c,a),cmp(a,abs(a)) print ~a,~b print partition+"[20]" # Note : All paramaters in Python are passed by reference unlike C,C++ print ~a,~b print math.sqrt(2) elif a==2 : #pass #It is like a null statement : where a statement is required synatctically print "a=2" print "Child Constructor Called..." print random.random(); print var del myList[0].    #we can Update Lists if var==5: # raw_input('Press Enter to Exit') #.                %x:hexadeximal %o:octal %e:exponent %f:float #While #similar to get but if key is not present then it will set arg1-arg2 key-value pair print partition+"[2]" class Student: #break print myFile.tell() print partition+"[6]" var1 = 10.              #integer print a a=3 child.childMethod().            # child calls its method for var in VARIABLES: print "Private Attribute:",hasattr(stu1,'__count') #cannot be accessed #Tuple.  Note: only difference between tuple and list is that tuples are a=2 print language print partition+"[16]" #myFile.seek(3,0) means read three bytes from beginning of file print a print long('123456') print float('1.23') print partition+"[17]" self.rollNo = rollNo print var1,var2,var3,var4 myList.extend(myShortList) for var in VARIABLES: print a del dict.    #deletes entire Dictionary print myTuple #List #to wait for user #printable string representation of class break print myFile.read() print myTuple*3 print random.uniform(10,20) break print s,t,u print cmp(myList,myShortList); #List Comparision #pass a=1 print _add(10,20); #Assignment Operators #variables, assignment and multiple assignment print List def getAttr(self): print "Parent Constructor Called..." del dict.    #deletes entire Dictionary print partition+"[25]" print str[3:].          #print characters starting from 4th while var>0: #multi-line statements : continuation character '\' random.shuffle(List) 
print partition+"[6]" def childMethod(self): #create. new dictionary with keys-values from sequence child.setAttr("Parent-Child").  # again call parent's method return a+b #same as above but memory allocation is different print 'Hello\tWorld'.expandtabs(20) #increase spaces in Tab os.remove("myNewFile.txt") def childMethod(self): a/=3 print cmp(myDict,myShortDict) #similar to get but if key is not present then it will set arg1-arg2 key-value pair print partition+"[26]" # a,ab,a+,ab+ def getAttr(self): print a import math myTuple = myShortTuple + myTuple #valid print issubclass(Child,Parent),isinstance(child,Child) #checks if it is subclass and instance of particular class import random #destructor a=-11 print a def __del__(self): break print random.randrange(100,500,5); print partition+"[6]" print 'HelloWorld'.swapcase() r = 'hello' #string print query.find('abcd') def __str__(self): print r'\n',R'\n'. #Raw String: Supresses escape sequences #use """--text--""" for multi-line paragraphs myList[0] = 'xyz' #we can Update Lists age. = 17 print "Private Attribute:",hasattr(stu1,'__count') #cannot be accessed import math print partition+"[17]" for language in languages: a+=5 print "Hello, Python" del dict[2]. #removes one entry import os myShortTuple = ('abcd','pqrs') print round(c),round(d) print idiom #use ; for multiple statements on same line print 'H' not in 'Hello' def printSum(arg1,*VARIABLES) : print myList.pop(len(myList)-1).            #removes with index and returns it #Can take any number of args but returns one value in form of expression myList.append('ABCD') #uniform function generates a random float between arg1 and arg2 print List #Decision Making #use ; for multiple statements on same line print l,m,n #Assignment Operators print random.random(); Parent.parentName = name #use rindex() to search backwards elif a==2 : self.name = name studentCount = 0 print query.find('abcd') print _add(10,20); #keyword arguments & default arguments for var in VARIABLES: #shuffle to shuffle a list or a tuple return total #Rename and Delete File # w,wb,w+,wb+ #delete idiom = raw_input("Enter an idiom") print partition+"[9]" #keyword arguments & default arguments myFile.close() print _add(10,20); print random.choice('Hello_World!'); print myFile.name,myFile.closed,myFile.mode print float(1) print 'Hello\tWorld'.expandtabs(20) #increase spaces in Tab print b not in List count += 1 # tell : tells you current position within the file where we start print p,q,r #Bitwise Operators para = raw_input("Tell me some about yourself...(In 10 words)\n") print "a=?" a-=3 #Bitwise Operators print a<<1,a>>1 #pass print int(8.14) #choice function to select numbers randomly from a given list,tuple or string print "Child Constructor Called..." print max('Hello world') print myFile.tell() print partition+"[26]" print dict[2] #use rindex() to search backwards class Parent:        # define parent class #Arithmetic Operators elif a==2 : #destructor q = 1.001.  #floating point #Numbers print myList var-=1 myFile.close() print partition+"[16]" print a print "Bases :",Student.__bases__; print word #have there own local namespace so cannot access any other parameters other than its parameter list #delattr(stu1,'name') to delete attribute b = 15 dict[2].    = "This is Two" print self.name,self.rollNo # tell : tells you current position within the file where we start def displayStudent(self): print stu1 myList.reverse() def displayStudentCount(self): print str[3:9].         #prints characters from 4th to 10th print '#dacacj%$^^'.isalnum() #checks alpha numeric #While #Object Oriented Programming print 'What a beautiful morning it is !'.split(" ",3) #splits string using delimiter with no of strings specified for language in languages: a+=5 #uniform function generates a random float between arg1 and arg2 dict['one'] = "This is One" print "Parent Attribute :", Parent.parentName paragraph = """this paragraph extends os.remove("myNewFile.txt") #Tell and Seek print myDict.keys() random.shuffle(List) print 3>3,2<3 #keyword arguments & default arguments print partition+"[6]" print idiom print ~a,~b print myTuple[0:2] #String print myFile.tell() if var==5: total = arg1; #Can take any number of args but returns one value in form of expression # r,rb,r+,rb+ str = "This is a sample python string. " #myList.sort() CUSTOM SORT? print dict[2] print a^b print myDict.get('PQR','Not Available here!') #arg2 is default value if key is not found print random.random(); print 'H' not in 'Hello' #same as above but memory allocation is different #Loops arr = [1,2,3,4,5, print dict #myList.sort() CUSTOM SORT? if var==5: print myList myList = ['Hello',23,17.28,5+4j,'Hello',12,'Hello'] print language #Read from keyboard print partition+"[14]" return 'Student(%s, %d)' % (self.name,self.rollNo) myShortTuple = ('abcd','pqrs') print partition+"[2]" print String1[6:],String1[:6] dict['one'] = "This is One" print cmp(a,c),cmp(c,a),cmp(a,abs(a)) triple quotes""" #break print var #For Loops # arg1 : start.  arg2 : stop. step : steps to be added in a num to decide random number import random print partition+"[20]" return 'Student(%s, %d)' % (self.name,self.rollNo) #Set #File Reading and Writing Modes print random.random(); print int('8') print float(1) print issubclass(Child,Parent),isinstance(child,Child) #checks if it is subclass and instance of particular class print max('Hello World') #returns max alphabet according to ASCII #.             read-only and cannot be updated print float(1) print "Hello\tWorld" #Horizontal Tab #.     We don't need to add self while calling function using object encode = 'HelloWorld'.encode('base64','strict') #encoding #.                %x:hexadeximal %o:octal %e:exponent %f:float print s,t,u #use rfind() to search backwards print int('1000',2) print p,q,r #Basic Operators print a print a for index in xrange(len(languages)-2): print query.find('Whatsapp',0,len(query)).  #finds substring and returns index #Anonymous Functions print a #myFile.seek(3,1) means read three bytes from current position child.childMethod().            # child calls its method myList.extend(myShortList) print partition+"[23]" print "a=2" print mySet def __del__(self): #Loop control statements print hex(32) # tell : tells you current position within the file where we start #use """--text--""" for multi-line paragraphs print myList[0].  #count from left myShortTuple = ('abcd','pqrs') print list((1,2,3,4,5)) print a def __init__(self): #break myTuple = myShortTuple + myTuple #valid #.                %x:hexadeximal %o:octal %e:exponent %f:float #to wait for user print partition+"[11]" print e print int(8.14) print "Module:",Student.__module__; print partition+"[3]" print cmp(myShortList,myList); print cmp(myList,myShortList); #List Comparision print random.random(); #delattr(stu1,'name') to delete attribute return a+b dict = dict.fromkeys(names,height) #note : here keys will not take corresponding values print var1,var2,var3,var4 elif a==2 : print 'What a beautiful morning it is !'.split(" ") #splits string using delimiter print a^b var-=1 #break return 'Student(%s, %d)' % (self.name,self.rollNo) #Assignment Operators #print "Hello\rWorld"#Carriage Return myShortDict = {'String':'Bye','Integer':99}; #Tuple.  Note: only difference between tuple and list is that tuples are print 'Child Method Called' return a+b a = 16 def printSum(arg1,*VARIABLES) : import os #Loops d print myDict['List'] parentName = "Parent" myTuple = myShortTuple + myTuple #valid print partition+"[21]" count += 1 print "I am %s and I am %d years old" %(name,age) #Bitwise Operators print a #This script contains basic python commands print myFile.tell() return print a #Rename and Delete File #use ; for multiple statements on same line print partition+"[26]" #Tell and Seek #While print List #printable string representation of class print partition+"[14]" if var==5: child.parentMethod().           # calls parent's method print "I am %s and I am %d years old" %(name,age) #Note: Each method in class should have first argument as self #Dictionary : It is similar to hash map i.e., has key-value pair var4 = 3 + 4j.          #complex print "Parent Attribute :", Parent.parentName print max('Hello World') #returns max alphabet according to ASCII print math.sqrt(2) #to wait for user for letter in 'Hello World': #multi-line statements : continuation character '\' print str*3.            #prints given string 3 times idiom = raw_input("Enter an idiom") b = 15 return #Data Conversion print cmp(myList,myList) # tell : tells you current position within the file where we start e = a + b + \ #Basic Operators print myFile.read() myShortList = ["abcd"] print myFile.name,myFile.closed,myFile.mode print paragraph print a print myDict idiom = raw_input("Enter an idiom") print _add(10,20); age. = 17 print "Parent Method Called..." print max(a,b),min(a,b) myFile = open("myFile.txt","r") print cmp(myDict,myShortDict) print "Parent Method Called..." names=('George','Gary','Gilbert') #randrange returns a random number from a range total+=var def displayStudent(self): #keyword arguments & default arguments else : print partition+"[19]" #String print "Bases :",Student.__bases__; print myList.remove(myList[len(myList)-1]). #removes with object but doesn't return #Format Symbols : %c:character %i:signed decimal %u:unsigned decimal print var import random class Student: for language in languages: # seek : helps us to go a specified position in the file to do I/O # w,wb,w+,wb+ print encode.endswith('\n',0,len(encode)) #Data Conversion print myList print a dict = {} self.name = name print long(123) #myFile.seek(3,1) means read three bytes from current position myFile.write(para) #.             read-only and cannot be updated #use '--text--' or "--text--" for single line word or sentence #Numbers #break print var print List #File I/O print myDict #to wait for user print "Destructor is called" print partition+"[16]" print random.random(); #myList.sort() CUSTOM SORT? print complex(3,4) print '     '.isspace() #returns true if string conatins whitespaces only print str*3.            #prints given string 3 times idiom = raw_input("Enter an idiom") self.name = name print int(8.14) setattr(stu1,'name',"PQR") print abs(b),abs(d) idiom = raw_input("Enter an idiom") #Python basic data types : Numbers, String, List, Tuple, Dictionary print cmp(myList,myShortList); #List Comparision myList.extend(myShortList) return a+b setattr(stu1,'name',"PQR") q = 1.001.  #floating point print e print 'Missisippi'.count('is',0,len('Missisippi')) # number of times substring occurs print encode.endswith('\n',0,len(encode)) var-=1 # a,ab,a+,ab+ #functions #Decision Making #Decision Making #Rename and Delete File print a print 'What a beautiful morning it is !'.split(" ",3) #splits string using delimiter with no of strings specified print myList + myShortList def __init__(self,name,rollNo): myList[0] = 'xyz' #we can Update Lists import random #Set print "Name. :",Student.__name__; child.setAttr("Parent-Child").  # again call parent's method #Rename and Delete File print myDict a**=2 print random.random(); a = 16 #Rename and Delete File myShortTuple = ('abcd','pqrs') print partition+"[18]" random.shuffle(List) print 3==3 print partition+"[12]" import random child.setAttr("Parent-Child").  # again call parent's method print myDict.items() while count<3 : # print partition dict = {} print 3>3,2<3 #keyword arguments & default arguments #variables, assignment and multiple assignment print name,age List = [1,2,3,4,5] var-=1 #Read from keyboard #use rindex() to search backwards print math.log(e),math.log10(10) import random print myList.count('Hello') print partition+"[22]" mySet = {1,2,'abcd'} if a==3 : #use """--text--""" for multi-line paragraphs #myFile.seek(3,0) means read three bytes from beginning of file print "Hello, Python" stu1.displayStudent() myShortDict = {'String':'Bye','Integer':99}; print var child.getAttr().                # again call parent's method print str a=1;b=2;c=3;d=4 a/=3 Parent.parentName = name print name,age print l,m,n print str*3.            #prints given string 3 times var1 = 10.              #integer print partition+"[13]" print partition+"[19]" myDict = {'String':'Hello','Integer':123,'Floating':3.14,'Complex':3+4j,'List':myList}; print myDict.items() print myDict b=6 print partition+"[6]" p = 1.      #integer print myDict.items() print long('123456') print str[3:9].         #prints characters from 4th to 10th print query.find('Whatsapp',0,len(query)).  #finds substring and returns index #It is like a null statement : where a statement is required synatctically print str[1].           #prints second character as indexing starts with 0 import math print hasattr(stu1,'name') #random function returns a float random number between 0 and 1 str = "This is a sample python string. " #Basic Operators print myDict stu1.displayStudentCount() print partition+"[10]" print partition+"[13]" print "Destructor is called" for index in xrange(len(languages)-2): def setAttr(self, name): print mySet #multi-line statements with [] or {} need not need continuation character #They are not created by normal def keyword but using lambda keyword print 'What a beautiful morning it is !'.split(" ",3) #splits string using delimiter with no of strings specified print sentence del dict.    #deletes entire Dictionary #Decision Making print 'Hello World'.center(10,'-') #word centered on certain characters #functions #Loops print math.exp(2) print str[3:9].         #prints characters from 4th to 10th print stu1 #Tell and Seek def __init__(self,name,rollNo): if a==3 : #Python basic data types : Numbers, String, List, Tuple, Dictionary a*=9 d print 3>3,2<3 print myList.count('Hello') print partition+"[1]" mult. = lambda arg1,arg2 : arg1*arg2 print myShortList*3 print String1[6:],String1[:6] def printSum(arg1,*VARIABLES) : print str #use rindex() to search backwards print myDict.items() studentCount = 0 print l,m,n print partition+"[16]" #random function returns a float random number between 0 and 1 print myDict.setdefault('PQR','Default') print var #Object Oriented Programming print printSum(10,20,30,40,50,60,70); name = 'xyz' print round(c),round(d) print partition+"[2]" a=1;b=2;c=3;d=4 break #myList.sort() CUSTOM SORT? print "Hello, " + str.  #appends Hello, to str and then prints it print cmp(a,c),cmp(c,a),cmp(a,abs(a)) os.remove("myNewFile.txt") print stu1 print 3>3,2<3 myShortDict = {'String':'Bye','Integer':99}; d print myList print myFile.name,myFile.closed,myFile.mode s=t=u=1 print "a=3" stu1.displayStudentCount() height=(123,140,190) print 3>=3,4<=4 random.shuffle(List) print 1+2,2*4,4-1,24/3,8%5 print myDict myList = ['Hello',23,17.28,5+4j,'Hello',12,'Hello'] print name,age print cmp(myTuple,myShortTuple) print a print sentence print b not in List print mySet sentence = "this is a sentence" #similar to get but if key is not present then it will set arg1-arg2 key-value pair print self.studentCount,self.__count print str[3:].          #print characters starting from 4th myFile = open("myFile.txt","r") return a+b myList[0] = 'xyz' #we can Update Lists print str*3.            #prints given string 3 times print s,t,u print "Parent Attribute :", Parent.parentName print myList.count('Hello') print partition+"[19]" child = Child().                # instance of child print 'What a beautiful morning it is !'.split(" ",3) #splits string using delimiter with no of strings specified #Set print myDict #break print paragraph class Student: #It is like a null statement : where a statement is required synatctically print 'hello'.capitalize() print "Hello, " + str.  #appends Hello, to str and then prints it print myDict.setdefault('PQR','Default') del dict[2]. #removes one entry a**=2 print myDict['List'] # Note : All paramaters in Python are passed by reference unlike C,C++ print str dict = {} def __init__(self,name,rollNo): var-=1 print arr c + \ #It is like a null statement : where a statement is required synatctically print partition+"[22]" def __init__(self,name,rollNo): def __del__(self): print partition+"[10]" print 'check thsi out, coz thsi is gr8'.replace('thsi','this') #String Manipulation import os print hex(32) #create. new dictionary with keys-values from sequence while var>0: #create. new dictionary with keys-values from sequence languages = ['C','C++','JAVA','PYTHON'] print partition+"[9]" # arg1 : start.  arg2 : stop. step : steps to be added in a num to decide random number print partition+"[23]" print max('Hello World') #returns max alphabet according to ASCII #myTuple[0] = '1000' Invalid print cmp(myList,myShortList); #List Comparision print "a=2" print printSum(10,20,30,40,50,60,70); a=3 def __init__(self): del dict[2]. #removes one entry print ~a,~b #Format Symbols : %c:character %i:signed decimal %u:unsigned decimal #Object Oriented Programming print partition+"[13]" print partition+"[4]" print ~a,~b print 3==3 return total def printSum(arg1,*VARIABLES) : print dict[2] #Loop control statements para = raw_input("Tell me some about yourself...(In 10 words)\n") for index in xrange(len(languages)-2): return 'Student(%s, %d)' % (self.name,self.rollNo) print abs(b),abs(d) print str*3.            #prints given string 3 times print math.ceil(c),math.ceil(d) print var print math.log(e),math.log10(10) print letter print r'\n',R'\n'. #Raw String: Supresses escape sequences print max('Hello World') #returns max alphabet according to ASCII print myDict['Complex'] def printInfo(name,age=35) : print myTuple print 3!=4,3<>4 print idiom print list((1,2,3,4,5)) in multiple lines and uses a-=3 #use rfind() to search backwards print word del stu1 print partition+"[8]" print languages[index] #While print word myFile = open("myFile.txt","r") print cmp(myList,myShortList); #List Comparision print "Child Constructor Called..." count = 0 print self.name,self.rollNo print 'H' in 'Hello' print partition+"[22]" print 'check thsi out, coz thsi is gr8'.replace('thsi','this') print hasattr(stu1,'name') print str[3:].          #print characters starting from 4th print 'H' not in 'Hello' print partition+"[21]" del dict.    #deletes entire Dictionary #For Loops myShortList = ["abcd"] def __del__(self): encode = 'HelloWorld'.encode('base64','strict') #encoding print 'Hello World'.center(10,'-') #word centered on certain characters random.seed(17); print issubclass(Child,Parent),isinstance(child,Child) #checks if it is subclass and instance of particular class #use ; for multiple statements on same line print myShortList*3 print dict['one'] def getAttr(self): print self.name,self.rollNo myFile.close() dict = {} #String print "a=2" #This script contains basic python commands print 11//3,-11//3#Floor Division #Object Oriented Programming def add(a,b): class Child(Parent): # define child class #.     We don't need to add self while calling function using object encode = 'HelloWorld'.encode('base64','strict') #encoding print random.choice((1,2,3,4,5,6,7,8,9)); for letter in 'Hello World': print random.choice('Hello_World!'); print myList #print query.index('abcd') #same as find but raises exception myFile.close() print random.randrange(100,500,5); #File I/O in multiple lines and uses print "Hello, Python" a=3 studentCount = 0 print '     '.isspace() #returns true if string conatins whitespaces only print cmp(a,c),cmp(c,a),cmp(a,abs(a)) #keyword arguments & default arguments print 'HelloWorld'.swapcase() #It is like a null statement : where a statement is required synatctically # r,rb,r+,rb+ # @author Rutvik Shah #randrange returns a random number from a range self.rollNo = rollNo print dict print cmp(myShortList,myList); var4 = 3 + 4j.          #complex #String print 'HelloWorld'.swapcase() # w,wb,w+,wb+ dict['one'] = "This is One" triple quotes""" print List myList.reverse() class Parent:        # define parent class print partition+"[4]" print myList print myTuple print query.find('Whatsapp',0,len(query)).  #finds substring and returns index #Anonymous Functions # raw_input('Press Enter to Exit') child.childMethod().            # child calls its method var1 = 10.              #integer print "a=3" #similar function isupper() and upper() name = 'xyz' print languages[index] child = Child().                # instance of child print myDict print partition+"[6]" mult  = lambda arg1,arg2 : arg1*arg2 #Rename and Delete File myList = ['Hello',23,17.28,5+4j,'Hello',12,'Hello'] a=1 print int('8') myShortList = ["abcd"] print s,t,u paragraph = """this paragraph extends #PLEASE UNDERSTAND ENVIRONMENT VARIABLES AND COMMAND LINE ARGUMENTS ? print partition+"[23]" print add(10,20); print myList #Tell and Seek arr = [1,2,3,4,5, #delete os.rename("myFile.txt","myNewFile.txt") break print math.log(e),math.log10(10) str = "This is a sample python string. " print var print list((1,2,3,4,5)) print mult(10,10); 6,7,8,9,10] os.remove("myNewFile.txt") print str a=10;b=-10;c=1.75;d=-1.75 var = 10 print math.exp(2) #uniform function generates a random float between arg1 and arg2 paragraph = """this paragraph extends # tell : tells you current position within the file where we start def displayStudent(self): print "Dict. :",Student.__dict__; print '13432421432'.isdigit() #checks if string conatins only digits String1 = "Hello World!" a=10;b=-10;c=1.75;d=-1.75 print myList.remove(myList[len(myList)-1]). #removes with object but doesn't return #similar function starts with import random print '#dacacj%$^^'.isalnum() #checks alpha numeric #use ; for multiple statements on same line print hex(32) #Comparision Operators print 3==3 arr = [1,2,3,4,5, print dict #variables, assignment and multiple assignment #Python basic data types : Numbers, String, List, Tuple, Dictionary print partition+"[19]" #Set print math.floor(c),math.floor(d) for index in xrange(len(languages)-2): #use ; for multiple statements on same.  linprint a^b print "Bases :",Student.__bases__; print partition+"[9]" print '     '.isspace() #returns true if string conatins whitespaces only print "I am %s and I am %d years old" %(name,age) print a else : #Basic Operators a+=5 var-=1 #myFile.seek(3,0) means read three bytes from beginning of file a=2 def printInfo(name,age=35) : print str[.             #print characters starting from 4th print partition+"[12]" myList.reverse() #Anonymous Functions total = arg1; a=1;b=2;c=3;d=4 for letter in 'Hello World': print _add(10,20); print arr #Arithmetic Operators print partition+"[13]" print math.log(e),math.log10(10) print myList print mySet print "Hello, Python" myFile = open("myFile.txt","r") a/=3 print '     '.isspace() #returns true if string conatins whitespaces only print List var1 = 10.              #integer print "Module:",Student.__module__; __count = 0 #private data member List = [1,2,3,4,5] print myFile.read() print myTuple[0] query = "Hi Siri, Open Whatsapp on my phone" print var print paragraph languages = ['C','C++','JAVA','PYTHON'] print '13432421432'.isdigit() #checks if string conatins only digits def __init__(self,name,rollNo): print 3>=3,4<=4 print s. .              #print string break return total a=3 print add(10,20); print long('123456') #Can take any number of args but returns one value in form of expression print math.ceil(c),math.ceil(d) #randrange returns a random number from a range #multi-line statements : continuation character '\' print b not in List #File I/O print a in List #Anonymous Functions print r'\n'.  R'\n'#Raw String: Supresses escape sequences print myTuple print 'check thsi out, coz thsi is gr8'.replace('thsi','this') def __str__(self): m.  lt= lambda arg1,arg2 : arg1*arg2 myFile.close() a-=3 l,m,n = 1,1.001,'hello' print "Child Constructor Called..." height=(123,140,190) def setAttr(self, name): print myList #keyword arguments & default arguments print 'H' not in 'Hello' #choice function to select numbers randomly from a given list,tuple or string # w,wb,w+,wb+ print "Bases :",Student.__bases__; print partition+"[14]" #use ; for multiple statements on same line print myList[.  2]#count from right print float(1) #use rindex() to search backwards #destructor def add(a,b): print myDict print partition+"[3]" child.setAttr("Parent-Child".   # again call parent's method print max(a,b),min(a,b) a=1 #break #similar function isupper() and upper() print 'Hello World'.center(10,'-') #word centered on certain characters print hasattr(stu1,'name') print partition+"[6]" #use '--text--' or "--text--" for single line.  woror sentence print myTuple + myShortTuple print paragraph str = "This is a sample python string. " #File I/O para = raw_input("Tell me some about yourself...(In 10 words)\n") #uniform function generates a random float between arg1 and arg2 break print 'What a beautiful morning it is !'.split(" ") #splits string using delimiter #File Reading and Writing Modes class Pa.  ent:      # define parent class print math.sqrt(2) parentName = "Parent" print "Name  :",Student.__name__; myList.extend(myShortList) total = arg1; def printInfo(name,age=35) : print partition+"[19]" print partition+"[11]" print myFile.tell() print myFile.name,myFile.closed,myFile.mode myFile = open("myFile.txt","r") print myTuple*3 return a+b total+=var print ~a,~b #multi-line statements : continuation character '\' #similar function isupper() and upper() #Tell and Seek def _add(a,b): print "Parent Attribute :", Parent.parentName random.shuffle(List) #variables, assignment and multiple assignment d class Child(Parent): # define child class #similar to get but if key is not present then it will set arg1-arg2 key-value pair mySet = {1,2,'abcd'} print long(123) myList[0] = 'xyz' #we can Update Lists while var>0: print "Private Attribute:",hasattr(stu1,'__count') #cannot be accessed #Basic Operators print "Hello, " + str   #appends Hello, to str and then prints it print "Hello, " +.  str #appends Hello, to str and then prints it #continue print a^b for letter in 'Hello World': print letter print oct(32) print myDict.setdefault('PQR','Default') names=('George','Gary','Gilbert') #myTuple[0] = '1000' Invalid #functions for generating random numbers print "a=2" print str..             #print characters starting from 4th #use rindex() to search backwards print _add(10,20); print partition+"[21]" print random.randrange(100,500,5); print pow(2,4) print "Parent Constructor Called..." print myDict.keys() print "Parent Constructor Called..." import os #T.    plNote: only difference between tuple and list is that tuples are print 3>3,2<3 print "Parent Method Called..." child.childMethod().            # child calls its method print cmp(myList,myList) print mult(10,10); print partition+"[16]" print int('8') print r'\n'.  R'\n'#Raw String: Supresses escape sequences count += 1 # @author Rutvik Shah List = [1,2,3,4,5] var = 10 print 'Child Method Called' #delete print e print "Hello\vWorld" #Vertical Tab #Data Conversion myFile = open("myFile.txt","w") dict['one'] = "This is One" #Basic Operators print partition+"[17]" print 'What a beautiful morning it i.     !        .rstrip() #removes trailing whitespaces #Defining a custom function myList.reverse() stu1.displayStudentCount() print paragraph myList.append('ABCD') print '13432421432'.isdigit() #checks if string conatins only digits if a==3 : dict.clear() #removes all entries myList.append('ABCD') #Note: Each method in class should have first argument as self #File Reading and Writing Modes print partition+"[18]" for language in languages: myShortTuple = ('abcd','pqrs') # a,ab,a+,ab+ print abs(b),abs(d) print list((1,2,3,4,5)) str = myFile.read() parentName = "Parent" print partition+"[5]" myFile.close() print a&b #Defining a custom function Parent.parentName = name for index in xrange(len(languages)-2): print myList.pop(len(myLis.    )-1.         #removes with index and returns it print word print s,t,u #multi-line statements : continuation character '\' #have there own local namespace so cannot access any other parameters other than its parameter list print partition+"[14]" in multiple lines and uses triple quotes""" myShortList = ["abcd"] print 'Child Method Called' return print 'HelloWorld'.swapcase() #Loops import os print cmp(myList,myShortList); #List Comparision def childMethod(self): child.childMethod().            # child calls its method for var in VARIABLES: print math.exp(2) a-=3 # w,wb,w+,wb+ a.  e= 17 print partition+"[1]" print max('Hello World') #returns.  maalphabet according to ASCII print dict['one'] #multi-line statements : continuation character '\' print myList[1:] print partition+"[18]" a%=7 print 'What a beautiful morning it is !'.split(" ") #splits string using delimiter print 3==3 print add(10,20); myList.append('ABCD') myFile.write(para) print "Child Constructor Called..." str = "This is a sample python string. " #Object Oriented Programming print word print partition+"[18]" pr.  nt str.            #print string print self.studentCount,self.__count print partition+"[3]" dict = dict.fromkeys(names,height) #note : here keys will not take corresponding values print encode.endswith('\n',0,len(encode)) print a|b print math.floor(c),math.floor(d) print paragraph print "Private Attribute:",hasattr(stu1,'__count') #cannot be accessed print add(10,20); Parent.parentName = name print partition+"[17]" print list((1,2,3,4,5)) print partition+"[17]" #delete # a,ab,a+,ab+ word = 'word' print.  str.            #print string print partition+"[16]" print str q = 1.001   #floating point print mult(10,10); #shuffle to shuffle a list or a tuple print languages[index] print encode.endswith('\n',0,len(encode)) myFile.write(para) count +=.  #Assignment Operators print sentence print var1,var2,var3,var4 dict = dict.fromkeys(names,height) #note : here keys will not take corresponding values del stu1 import random for index in xrange(len(languages)-2): print myList + myShortList encode = 'HelloWorld'.encode('base64','strict') #encoding print cmp(myList,myShortList); #List Comparision else : def parentMethod(self): print partition+"[2]" l,m,n = 1,1.001,'hello' #use rindex() to search backwards print language #Bitwise Operators print mult(10,10); #pass myList.append('ABCD') print 'What a beautiful morning it is !'.split(" ",3) #splits string using delimiter with no of strings specified # tell : tells you current position within the file where we start triple quotes""" paragraph = """this paragraph extends print partition+"[16]" a=2 print b not in List class Student: def __init__(self): print partition+"[19]" #to wait for user if a==3 : #delattr(stu1,'name') to delete attribute #myFile.seek(3,0) means read three bytes from beginning of.  fil#Basic Operators partition = "----------------------------------------------------------------" print a print 3>=3,4<=4 print 'What a beautiful morning i.   is !'         .rstrip() #removes trailing whitespaces print myList + myShortList print 11//3,-11//3#Floor Division print stu1 print str*3.            #prints given string 3 times while count<3 : print var1,var2,var3,var4 del dict[2]  #removes one entry return a+b print "Child Constructor Called..." print a dict = dict.fromkeys(names,height) #note : here keys will not take corresponding values #This script contains basic python commands for language in languages: #destructor print a&b if var==5: print a print languages[index] a%=7 import math print var print var print "Parent Attribute :", Parent.parentName print 'Hello World'.endswith('ld',0,len('Hello World')) print var print languages[index] #Note: Keys in a Dictionary should be immuatable so Tuples can qualify as keys but not Lists print "Parent Method Called..." child.childMethod()             # child calls its method break print partition+"[4]" print random.choice((1,2,3,4,5,6,7,8,9)); encode = 'HelloWorld'.encode('base64','strict') #encoding for index in xrange(len(languages)-2): #Data Conversion print partition+"[2]" a=10;b=-10;c=1.75;d=-1.75 print "Parent Attribute :", Parent.parentName print partition+"[12]" print mySet print var1,var2,var3,var4 print self.name,self.rollNo print a #same as above but memory allocation is different print hasattr(stu1,'name') #use '--text--' or "--text--" for single line word or sentence p.        in'.isspace() #returns true if string conatins whitespaces only triple quotes""" print a myFile.close() a+=3 c + \ #shuffle to shuffle a list or a tuple myList.append('ABCD') print "a=?" print dict # arg1 : start.  arg2 : s.  opstep : steps to be added in a num to decide random number print myList #print "Hello\rWorld"#Carriage Return print partition+"[16]" print partition+"[14]" print float(1) print myList.pop(len(myList)-1)             #removes with index and returns it print 3!=4,3<>4 print "Dict  :",Student.__dict__; #String print a def printSum(arg1,*VARIABLES) : print "Parent Constructor Called..." #              read-only and cannot be updated d a=1 print math.ceil(c),math.ceil(d) #similar function starts with print myShortList*3 var3 = 1.0001           #float #Arithmetic Operators print 'check thsi out, coz thsi is gr8'.replace('thsi','this') if var==5: #choice function to select numbers randomly from a given list,tuple or string arr = [1,2,3,4,5, print 3==3 print partition+"[18]" #While #Membership Operators String1 = "Hello World!" print 'What a beautiful morning it is !'.split(" ",3) #splits string using delimiter with no of strings specified for index in xrange(len(languages)-2): def __del__(self): print myList.remove(myList[.  en(myList)-1])#removes with object but doesn''